package cn.glowd.mybatis.generator.comment;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.internal.DefaultCommentGenerator;

/**
 * 
 * @author glowd
 * @date 2018/10/09
 */
public class GlowdCommentGenerator extends DefaultCommentGenerator {

    private SimpleDateFormat dateFormat;

    public GlowdCommentGenerator() {
        super();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    }

    /**
     * class comment
     */
    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine(" * This class corresponds to the database table <tt>"
            + introspectedTable.getFullyQualifiedTable() + "</tt>");
        topLevelClass.addJavaDocLine(" * ");
        topLevelClass.addJavaDocLine(" * This file is generated by <tt>glowd<tt>");
        topLevelClass.addJavaDocLine(" * ");
        topLevelClass.addJavaDocLine(" * PLEASE DO NOT MODIFY THIS FILE MANUALLY.");
        topLevelClass.addJavaDocLine(" * To modify the file, you should go to find the file");
        topLevelClass
            .addJavaDocLine(" * <tt>{project-home}/dalgen/mybatis_generator.xml<tt>. Modify the configuration file");
        topLevelClass.addJavaDocLine(
            " * according to your needs, then run <tt>ant</tt> to generate this file in {project-home}/dalgen.");
        topLevelClass.addJavaDocLine(" * ");
        topLevelClass.addJavaDocLine(" * @author glowd");
        topLevelClass.addJavaDocLine(" * @since " + getDateString());
        topLevelClass.addJavaDocLine(" */");
    }

    /**
     * method comment
     */
    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        method.addJavaDocLine("/**");
        String methodName = method.getName();
        String table = " <tt>" + introspectedTable.getFullyQualifiedTable() + "</tt>";

        if ("deleteByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * delete one record by primary key from" + table);
        } else if ("insert".equals(methodName)) {
            method.addJavaDocLine(" * insert one record into table from" + table);
        } else if ("selectByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * get one record by primary key from" + table);
        } else if ("updateByPrimaryKey".equals(methodName)) {
            method.addJavaDocLine(" * update one record by primary key from" + table);
        } else if ("selectAll".equals(methodName)) {
            method.addJavaDocLine(" * get all records from " + table);
        }
        method.addJavaDocLine(" *");
        List<Parameter> parameterList = method.getParameters();
        String paramterName;
        for (Parameter parameter : parameterList) {
            paramterName = parameter.getName();
            method.addJavaDocLine(" * @param " + paramterName);
        }
        // addJavadocTag(method, false);
        method.addJavaDocLine(" */");
    }

    /**
     * 自己加入的field，例如serialVersionUID，不对应数据库中的列
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        field.addJavaDocLine("/** serialVersionUID */");
    }

    /**
     * field comment
     */
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable,
        IntrospectedColumn introspectedColumn) {
        StringBuilder sb = new StringBuilder();
        field.addJavaDocLine("/**");
        field.addJavaDocLine(" * <pre>");
        if (introspectedColumn.getRemarks() != null)
            field.addJavaDocLine(" * " + introspectedColumn.getRemarks());
        sb.append(" * This field corresponds to the database column <tt>");
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        sb.append("<tt>");
        field.addJavaDocLine(sb.toString());
        field.addJavaDocLine(" * </pre>");
        // addJavadocTag(field, false);
        field.addJavaDocLine(" */");
    }

    /**
     * get commment
     */
    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable,
        IntrospectedColumn introspectedColumn) {
        StringBuilder sb = new StringBuilder();
        method.addJavaDocLine("/**");
        method.addJavaDocLine(" * <pre>");
        sb.append(" * This field corresponds to the database column <tt>");
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        sb.append("<tt>");
        method.addJavaDocLine(sb.toString());
        method.addJavaDocLine(" * </pre>");
        method.addJavaDocLine(" *");
        sb = new StringBuilder();
        sb.append(" * @return ");
        sb.append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString());
        // addJavadocTag(method, false);
        method.addJavaDocLine(" */");
    }

    /**
     * SET comment
     */
    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable,
        IntrospectedColumn introspectedColumn) {
        StringBuilder sb = new StringBuilder();
        method.addJavaDocLine("/**");
        method.addJavaDocLine(" * <pre>");
        sb.append(" * This field corresponds to the database column <tt>");
        sb.append(introspectedTable.getFullyQualifiedTable());
        sb.append('.');
        sb.append(introspectedColumn.getActualColumnName());
        sb.append("<tt>");
        method.addJavaDocLine(sb.toString());
        method.addJavaDocLine(" * </pre>");
        method.addJavaDocLine(" *");
        Parameter parm = method.getParameters().get(0);
        sb = new StringBuilder();
        sb.append(" * @param ").append(parm.getName());
        sb.append(" ").append(introspectedColumn.getRemarks());
        method.addJavaDocLine(sb.toString());
        // addJavadocTag(method, false);
        method.addJavaDocLine(" */");
    }

    /**
     * Adds a suitable comment to warn users that the element was generated, and when it was generated.
     *
     * @param xmlElement the xml element
     */
    @Override
    public void addComment(XmlElement xmlElement) {
        xmlElement.addElement(new TextElement("<!--"));
        StringBuilder sb = new StringBuilder();
        sb.append("  WARNING -");
        sb.append(" This element is automatically generated by proton, do not modify.");

        xmlElement.addElement(new TextElement(sb.toString()));
        xmlElement.addElement(new TextElement("-->"));
    }

    @Override
    protected String getDateString() {
        return dateFormat.format(new Date());
    }
}
